#!/usr/bin/env python

Import("environment")

import core_builders
import make_binders
from platform_methods import run_in_subprocess

environment.core_sources = []


# Generate AES256 script encryption key
import os

txt = "0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0"
if "SCRIPT_AES256_ENCRYPTION_KEY" in os.environ:
    key = os.environ["SCRIPT_AES256_ENCRYPTION_KEY"]
    ec_valid = True
    if len(key) != 64:
        ec_valid = False
    else:
        txt = ""
        for i in range(len(key) >> 1):
            if i > 0:
                txt += ","
            txts = "0x" + key[i * 2 : i * 2 + 2]
            try:
                int(txts, 16)
            except Exception:
                ec_valid = False
            txt += txts
    if not ec_valid:
        print(
            "Error: Invalid AES256 encryption key, not 64 hexadecimal characters: '"
            + key
            + "'."
        )
        print(
            "Unset 'SCRIPT_AES256_ENCRYPTION_KEY' in your environment "
            "or make sure that it contains exactly 64 hexadecimal characters."
        )
        Exit(255)

# NOTE: It is safe to generate this file here, since this is still executed serially
with open("script_encryption_key.gen.cpp", "w") as f:
    f.write(
        '#include "core/project_settings.h"\nuint8_t script_encryption_key[32]={'
        + txt
        + "};\n"
    )


# Add required thirdparty code.

thirdparty_obj = []

env_thirdparty = environment.Clone()
env_thirdparty.disable_warnings()

# Misc thirdparty code: header paths are hardcoded, we don't need to append
# to the include path (saves a few chars on the compiler invocation for touchy MSVC...)
thirdparty_misc_dir = "#thirdparty/misc/"
thirdparty_misc_sources = [
    # C sources
    "fastlz.c",
    "smaz.c",
    # C++ sources
    "hq2x.cpp",
    "pcg.cpp",
    "triangulator.cpp",
    "clipper.cpp",
]
thirdparty_misc_sources = [
    thirdparty_misc_dir + file for file in thirdparty_misc_sources
]
env_thirdparty.add_source_files(thirdparty_obj, thirdparty_misc_sources)

# Zlib library, can be unbundled
if environment["builtin_zlib"]:
    thirdparty_zlib_dir = "#thirdparty/zlib/"
    thirdparty_zlib_sources = [
        "adler32.c",
        "compress.c",
        "crc32.c",
        "deflate.c",
        "infback.c",
        "inffast.c",
        "inflate.c",
        "inftrees.c",
        "trees.c",
        "uncompr.c",
        "zutil.c",
    ]
    thirdparty_zlib_sources = [
        thirdparty_zlib_dir + file for file in thirdparty_zlib_sources
    ]

    env_thirdparty.Prepend(CPPPATH=[thirdparty_zlib_dir])
    # Needs to be available in main environment too
    environment.Prepend(CPPPATH=[thirdparty_zlib_dir])
    if environment["target"] == "debug":
        env_thirdparty.Append(CPPDEFINES=["ZLIB_DEBUG"])

    env_thirdparty.add_source_files(thirdparty_obj, thirdparty_zlib_sources)

# Minizip library, could be unbundled in theory
# However, our version has some custom modifications, so it won't compile with the system one
thirdparty_minizip_dir = "#thirdparty/minizip/"
thirdparty_minizip_sources = [
    "ioapi.c",
    "unzip.c",
    "zip.c",
]
thirdparty_minizip_sources = [
    thirdparty_minizip_dir + file for file in thirdparty_minizip_sources
]
env_thirdparty.add_source_files(thirdparty_obj, thirdparty_minizip_sources)

# Zstd library, can be unbundled in theory
# though we currently use some private symbols
# https://github.com/godotengine/godot/issues/17374
if environment["builtin_zstd"]:
    thirdparty_zstd_dir = "#thirdparty/zstd/"
    thirdparty_zstd_sources = [
        "common/debug.c",
        "common/entropy_common.c",
        "common/error_private.c",
        "common/fse_decompress.c",
        "common/pool.c",
        "common/threading.c",
        "common/xxhash.c",
        "common/zstd_common.c",
        "compress/fse_compress.c",
        "compress/hist.c",
        "compress/huf_compress.c",
        "compress/zstd_compress.c",
        "compress/zstd_double_fast.c",
        "compress/zstd_fast.c",
        "compress/zstd_lazy.c",
        "compress/zstd_ldm.c",
        "compress/zstd_opt.c",
        "compress/zstdmt_compress.c",
        "compress/zstd_compress_literals.c",
        "compress/zstd_compress_sequences.c",
        "compress/zstd_compress_superblock.c",
        "decompress/huf_decompress.c",
        "decompress/zstd_ddict.c",
        "decompress/zstd_decompress_block.c",
        "decompress/zstd_decompress.c",
    ]
    thirdparty_zstd_sources = [
        thirdparty_zstd_dir + file for file in thirdparty_zstd_sources
    ]

    env_thirdparty.Prepend(
        CPPPATH=[thirdparty_zstd_dir, thirdparty_zstd_dir + "common"]
    )
    env_thirdparty.Append(CPPDEFINES=["ZSTD_STATIC_LINKING_ONLY"])
    environment.Prepend(CPPPATH=thirdparty_zstd_dir)
    # Also needed in main environment includes will trigger warnings
    environment.Append(CPPDEFINES=["ZSTD_STATIC_LINKING_ONLY"])

    env_thirdparty.add_source_files(thirdparty_obj, thirdparty_zstd_sources)


environment.core_sources += thirdparty_obj


# Rebel source files

environment.add_source_files(environment.core_sources, "*.cpp")
environment.add_source_files(environment.core_sources, "script_encryption_key.gen.cpp")

# Certificates
environment.Depends(
    "#core/io/certs_compressed.gen.h",
    [
        "#thirdparty/certs/ca-bundle.crt",
        environment.Value(environment["builtin_certs"]),
        environment.Value(environment["system_certs_path"]),
    ],
)
environment.CommandNoCache(
    "#core/io/certs_compressed.gen.h",
    "#thirdparty/certs/ca-bundle.crt",
    run_in_subprocess(core_builders.make_certs_header),
)

# Make binders
environment.CommandNoCache(
    ["method_bind.gen.inc", "method_bind_ext.gen.inc", "method_bind_free_func.gen.inc"],
    "make_binders.py",
    run_in_subprocess(make_binders.run),
)

# Authors
environment.Depends("#core/authors.gen.h", "../AUTHORS.md")
environment.CommandNoCache(
    "#core/authors.gen.h",
    "../AUTHORS.md",
    run_in_subprocess(core_builders.make_authors_header),
)

# Donors
environment.Depends("#core/donors.gen.h", "../DONORS.md")
environment.CommandNoCache(
    "#core/donors.gen.h",
    "../DONORS.md",
    run_in_subprocess(core_builders.make_donors_header),
)

# License
environment.Depends("#core/license.gen.h", ["../copyright", "../LICENSE"])
environment.CommandNoCache(
    "#core/license.gen.h",
    ["../copyright", "../LICENSE"],
    run_in_subprocess(core_builders.make_license_header),
)

# Chain load SCsubs
SConscript("os/SCsub")
SConscript("math/SCsub")
SConscript("crypto/SCsub")
SConscript("io/SCsub")
SConscript("bind/SCsub")


# Build it all as a library
lib = environment.add_library("core", environment.core_sources)
environment.Prepend(LIBS=[lib])

# Needed to force rebuilding the core files when the thirdparty code is updated.
environment.Depends(lib, thirdparty_obj)
