#!/usr/bin/env python

Import("env")

android_sources = [
    "android_audio_driver.cpp",
    "android_file_access.cpp",
    "android_input_handler.cpp",
    "android_key_mapping.cpp",
    "android_java_class.cpp",
    "android_jni.cpp",
    "android_jni_dir_access.cpp",
    "android_jni_io.cpp",
    "android_jni_os.cpp",
    "android_jni_plugin.cpp",
    "android_jni_thread.cpp",
    "android_jni_utils.cpp",
    "android_os.cpp",
    "android_net_socket.cpp",
]

android_environment = env.Clone()

android_objects = []
for filename in android_sources:
    android_objects.append(android_environment.SharedObject(filename))

thirdparty_environment = android_environment.Clone()
thirdparty_environment.disable_warnings()
thirdparty_objects = thirdparty_environment.SharedObject(
    "#thirdparty/misc/ifaddrs-android.cc"
)
android_objects.append(thirdparty_objects)

android_library = android_environment.add_shared_library(
    "#bin/librebel", [android_objects], SHLIBSUFFIX=env["SHLIBSUFFIX"]
)

# Needed to force rebuilding the platform files when the thirdparty code is updated.
env.Depends(android_library, thirdparty_objects)

arch_dir = ""
if env["android_arch"] == "armv7":
    arch_dir = "armeabi-v7a/"
elif env["android_arch"] == "arm64v8":
    arch_dir = "arm64-v8a/"
elif env["android_arch"] == "x86":
    arch_dir = "x86/"
elif env["android_arch"] == "x86_64":
    arch_dir = "x86_64/"
else:
    print(
        "WARN: Architecture not suitable for embedding into APK; keeping .so at \\bin"
    )

if arch_dir != "":
    if env["target"] == "release":
        build_dir = "release/"
    else:  # release_debug, debug
        build_dir = "debug/"

    project_src_dir = "project/engine/src/"
    target = project_src_dir + build_dir + "jniLibs/" + arch_dir + "librebel_android.so"
    source = "#bin/librebel" + env["SHLIBSUFFIX"]
    android_environment.Command(target, source, Copy("$TARGET", "$SOURCE"))
    target = project_src_dir + "main/" + "jniLibs/" + arch_dir + "libc++_shared.so"
    source = env["LIBC"]
    android_environment.Command(target, source, Copy("$TARGET", "$SOURCE"))
