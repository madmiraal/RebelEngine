# A collection of functions used by the Rebel build system.

# System imports
import os
import sys

# Rebel imports
from .plugins import (
    get_plugin,
    get_plugins,
    is_plugin_path,
)

# Platforms
###########

platforms_path = "platforms"
platform_file = "platform.py"

def get_platforms():
    return get_plugins(platforms_path, platform_file)


def get_supported_platforms():
    supported_platforms = []
    platforms = get_platforms()
    for platform in platforms:
        if platform.can_build():
            platform_name = platform.__package__.split('.')[-1]
            supported_platforms.append(platform_name)
    return supported_platforms


def print_supported_platforms():
    print("The following platforms are supported:")
    supported_platforms = get_supported_platforms()
    for supported_platform in supported_platforms:
        print("\t" + supported_platform)
        

def detect_platform():
    if (
        sys.platform.startswith("linux")
        or sys.platform.startswith("dragonfly")
        or sys.platform.startswith("freebsd")
        or sys.platform.startswith("netbsd")
        or sys.platform.startswith("openbsd")
    ):
        platform = "linux"
    elif sys.platform == "darwin":
        platform = "macos"
    elif sys.platform == "win32":
        platform = "windows"
    else:
        print("Could not detect platform automatically.")
        build.print_supported_platforms()
        print("\nPlease run SCons again and select a supported platform: platform=<string>")
        sys.exit(255)
    print("Automatically detected platform: " + platform)
    return platform


def get_platform(platform_name):
    platform_path = os.path.join(platforms_path, platform_name)
    if not is_plugin_path(platform_path, platform_file):
        print("ERROR: Unrecognized platform: " + platform_name)
        print_supported_platforms()
        sys.exit(255)
    return get_plugin(platform_name, platforms_path, platform_file)


def create_platform_icon_headers(platform_name):
    icon_names = ["logo", "run_icon"]
    platform_path = os.path.join(platforms_path, platform_name)
    for icon_name in icon_names:
        png_path = os.path.join(platform_path, icon_name + ".png")
        if not os.path.isfile(png_path):
            continue

        contents = " /* AUTOGENERATED FILE, DO NOT EDIT */ \n"
        contents += " static const unsigned char _" + platform_name + "_" + icon_name + "[]={"
        with open(png_path, "rb") as png_file:
            byte = png_file.read(1)
            if len(byte) == 1:
                contents += hex(ord(byte))
            byte = png_file.read(1)
            while len(byte) == 1:
                contents += "," + hex(ord(byte))
                byte = png_file.read(1)
            contents += "};\n"

        header_path = os.path.join(platform_path, icon_name + ".gen.h")
        with open(header_path, "w") as header_file:
            header_file.write(contents)


def create_platforms_icon_headers():
    platform_names = os.listdir(platforms_path)
    for platform_name in platform_names:
        platform_path = os.path.join(platforms_path, platform_name)
        if not is_plugin_path(platform_path, platform_file):
            continue
        create_platform_icon_headers(platform_name)
